-- üì® STARTUPATCH - DATOS DE EJEMPLO PARA SISTEMA DE MENSAJER√çA
-- Ejecutar despu√©s de completar FASE 2
-- Versi√≥n: 1.0 | Fecha: Agosto 12, 2025

-- ‚ö†Ô∏è IMPORTANTE: Estos datos son de ejemplo para desarrollo y testing
-- NO ejecutar en producci√≥n con usuarios reales

SET client_encoding = 'UTF8';

-- üéØ PARTE 1: GRUPOS TEM√ÅTICOS
-- Insertar grupos variados por industria y temas

INSERT INTO groups (id, name, description, category, is_private, is_verified, member_limit, tags, created_by) VALUES

-- Grupos de Tecnolog√≠a
('550e8400-e29b-41d4-a716-446655440001', 
 'Developers M√©xico', 
 'Comunidad de desarrolladores en M√©xico. Discutimos tecnolog√≠as, oportunidades laborales y proyectos colaborativos.',
 'Tecnolog√≠a', 
 false, 
 true, 
 500,
 ARRAY['desarrollo', 'programaci√≥n', 'tecnolog√≠a', 'm√©xico', 'trabajo'],
 (SELECT id FROM auth.users LIMIT 1)),

('550e8400-e29b-41d4-a716-446655440002',
 'AI & Machine Learning',
 'Espacio para profesionales de IA, ML y Data Science. Compartimos proyectos, papers y oportunidades.',
 'Tecnolog√≠a',
 false,
 true,
 300,
 ARRAY['ai', 'machine-learning', 'data-science', 'python', 'tensorflow'],
 (SELECT id FROM auth.users LIMIT 1)),

-- Grupos de Startups
('550e8400-e29b-41d4-a716-446655440003',
 'Fundadores Latinoam√©rica',
 'Red de fundadores y co-fundadores en LATAM. Networking, mentor√≠as y colaboraciones estrat√©gicas.',
 'Startups',
 false,
 true,
 200,
 ARRAY['startups', 'fundadores', 'emprendimiento', 'latam', 'networking'],
 (SELECT id FROM auth.users LIMIT 1)),

('550e8400-e29b-41d4-a716-446655440004',
 'Fintech Innovators',
 'Comunidad de profesionales en fintech. Discutimos tendencias, regulaciones y oportunidades de negocio.',
 'Fintech',
 false,
 true,
 150,
 ARRAY['fintech', 'blockchain', 'pagos', 'banking', 'crypto'],
 (SELECT id FROM auth.users LIMIT 1)),

-- Grupos de Marketing
('550e8400-e29b-41d4-a716-446655440005',
 'Growth Hackers',
 'Estrategias de crecimiento, marketing digital y acquisition. Para marketers y growth managers.',
 'Marketing',
 false,
 false,
 250,
 ARRAY['growth-hacking', 'marketing', 'digital', 'seo', 'analytics'],
 (SELECT id FROM auth.users LIMIT 1)),

-- Grupos Privados/Selectos
('550e8400-e29b-41d4-a716-446655440006',
 'CTO Network',
 'Red privada de CTOs y l√≠deres t√©cnicos. Discusiones estrat√©gicas sobre tecnolog√≠a y equipos.',
 'Liderazgo',
 true,
 true,
 50,
 ARRAY['cto', 'liderazgo', 'arquitectura', 'equipos', 'estrategia'],
 (SELECT id FROM auth.users LIMIT 1)),

('550e8400-e29b-41d4-a716-446655440007',
 'Women in Tech MX',
 'Comunidad de mujeres en tecnolog√≠a en M√©xico. Mentor√≠as, networking y apoyo profesional.',
 'Diversidad',
 false,
 true,
 300,
 ARRAY['mujeres', 'tecnolog√≠a', 'diversidad', 'mentor√≠as', 'networking'],
 (SELECT id FROM auth.users LIMIT 1)),

-- Grupos por Ciudad
('550e8400-e29b-41d4-a716-446655440008',
 'Startup CDMX',
 'Ecosistema startup en Ciudad de M√©xico. Eventos, networking y colaboraciones locales.',
 'Local',
 false,
 false,
 400,
 ARRAY['cdmx', 'startups', 'eventos', 'networking', 'local'],
 (SELECT id FROM auth.users LIMIT 1));

-- Verificar grupos creados
SELECT 
    name, 
    category, 
    ARRAY_LENGTH(tags, 1) as tag_count,
    is_private,
    is_verified
FROM groups 
ORDER BY created_at;

-- üéØ PARTE 2: MEMBRES√çAS DE GRUPOS
-- Simular usuarios uni√©ndose a grupos con diferentes roles

-- Insertar membres√≠as (usando IDs de usuarios existentes)
DO $$
DECLARE
    user_ids UUID[];
    group_ids UUID[];
    i INTEGER;
    j INTEGER;
    random_role TEXT;
BEGIN
    -- Obtener IDs de usuarios disponibles
    SELECT ARRAY(SELECT id FROM auth.users ORDER BY created_at LIMIT 10) INTO user_ids;
    
    -- Obtener IDs de grupos
    SELECT ARRAY(SELECT id FROM groups ORDER BY created_at) INTO group_ids;
    
    -- Si no hay usuarios, crear datos de ejemplo b√°sicos
    IF array_length(user_ids, 1) IS NULL OR array_length(user_ids, 1) = 0 THEN
        RAISE NOTICE 'No hay usuarios en auth.users. Debes registrar usuarios primero.';
        RAISE NOTICE 'Las membres√≠as se crear√°n cuando tengas usuarios reales.';
        RETURN;
    END IF;
    
    -- Crear membres√≠as para cada grupo
    FOR i IN 1..array_length(group_ids, 1) LOOP
        -- Primer usuario como admin
        INSERT INTO group_memberships (group_id, user_id, role) 
        VALUES (group_ids[i], user_ids[1], 'admin')
        ON CONFLICT DO NOTHING;
        
        -- Agregar 3-7 miembros m√°s por grupo
        FOR j IN 2..LEAST(array_length(user_ids, 1), 1 + (random() * 6)::INTEGER + 3) LOOP
            -- Roles aleatorios
            random_role := CASE (random() * 10)::INTEGER
                WHEN 0 THEN 'moderator'
                ELSE 'member'
            END;
            
            INSERT INTO group_memberships (group_id, user_id, role) 
            VALUES (group_ids[i], user_ids[j], random_role)
            ON CONFLICT DO NOTHING;
        END LOOP;
    END LOOP;
    
    RAISE NOTICE 'Membres√≠as creadas exitosamente para % usuarios en % grupos', 
                 array_length(user_ids, 1), array_length(group_ids, 1);
END $$;

-- Verificar membres√≠as
SELECT 
    g.name as grupo,
    COUNT(gm.user_id) as miembros,
    COUNT(CASE WHEN gm.role = 'admin' THEN 1 END) as admins,
    COUNT(CASE WHEN gm.role = 'moderator' THEN 1 END) as moderators,
    COUNT(CASE WHEN gm.role = 'member' THEN 1 END) as members
FROM groups g
LEFT JOIN group_memberships gm ON g.id = gm.group_id
GROUP BY g.id, g.name
ORDER BY miembros DESC;

-- üéØ PARTE 3: CONVERSACIONES PRIVADAS
-- Crear conversaciones entre usuarios

DO $$
DECLARE
    user_ids UUID[];
    i INTEGER;
    j INTEGER;
BEGIN
    -- Obtener usuarios
    SELECT ARRAY(SELECT id FROM auth.users ORDER BY created_at LIMIT 10) INTO user_ids;
    
    IF array_length(user_ids, 1) IS NULL OR array_length(user_ids, 1) < 2 THEN
        RAISE NOTICE 'Necesitas al menos 2 usuarios para crear conversaciones.';
        RETURN;
    END IF;
    
    -- Crear conversaciones entre diferentes pares de usuarios
    FOR i IN 1..array_length(user_ids, 1) LOOP
        FOR j IN (i+1)..LEAST(array_length(user_ids, 1), i+3) LOOP
            INSERT INTO conversations (user1_id, user2_id) 
            VALUES (user_ids[i], user_ids[j])
            ON CONFLICT DO NOTHING;
        END LOOP;
    END LOOP;
    
    RAISE NOTICE 'Conversaciones privadas creadas entre usuarios';
END $$;

-- üéØ PARTE 4: MENSAJES DE GRUPOS
-- Crear mensajes realistas en los grupos

DO $$
DECLARE
    group_ids UUID[];
    user_ids UUID[];
    conversation_ids UUID[];
    i INTEGER;
    random_user UUID;
    random_group UUID;
    mensajes_grupo TEXT[] := ARRAY[
        '¬°Hola a todos! Soy nuevo en el grupo üëã',
        'Excelente iniciativa, me parece muy √∫til este espacio',
        '¬øAlguien tiene experiencia con microservicios en Node.js?',
        'Comparto un art√≠culo interesante sobre las √∫ltimas tendencias',
        '¬øHay alg√∫n evento presencial pr√≥ximamente?',
        'Busco colaboradores para un proyecto innovador',
        '¬°Felicitaciones por el crecimiento de la comunidad!',
        '¬øRecomendaciones de libros sobre liderazgo t√©cnico?',
        'Estoy organizando un workshop, ¬øles interesa participar?',
        'Gran discusi√≥n la de ayer, aprend√≠ mucho',
        'Comparto mi experiencia con esta tecnolog√≠a...',
        '¬øAlguien m√°s va a la conferencia de este mes?',
        'Pregunta t√©cnica: ¬øcu√°l es su stack favorito?',
        'Nuevo en la ciudad, ¬ørecomendaciones de coworking?',
        'Compartiendo oportunidad laboral interesante'
    ];
    mensajes_privados TEXT[] := ARRAY[
        'Hola! Vi tu perfil y me pareci√≥ muy interesante tu experiencia',
        'Muchas gracias por conectar, espero podamos colaborar',
        '¬øTe interesar√≠a tomar un caf√© para conocernos mejor?',
        'Excelente presentaci√≥n en el evento de ayer',
        '¬øTienes tiempo para una llamada esta semana?',
        'Me encantar√≠a conocer m√°s sobre tu proyecto',
        'Podr√≠amos hacer networking en el pr√≥ximo meetup',
        'Tu experiencia en esa empresa debe ser muy valiosa',
        '¬øC√≥mo has encontrado el mercado laboral √∫ltimamente?',
        'Interesante punto de vista sobre el tema que discutimos'
    ];
BEGIN
    -- Obtener IDs necesarios
    SELECT ARRAY(SELECT id FROM groups) INTO group_ids;
    SELECT ARRAY(SELECT id FROM auth.users LIMIT 10) INTO user_ids;
    SELECT ARRAY(SELECT id FROM conversations) INTO conversation_ids;
    
    IF array_length(user_ids, 1) IS NULL OR array_length(user_ids, 1) = 0 THEN
        RAISE NOTICE 'No hay usuarios disponibles para crear mensajes.';
        RETURN;
    END IF;
    
    -- Crear mensajes de grupo
    IF array_length(group_ids, 1) > 0 THEN
        FOR i IN 1..30 LOOP -- 30 mensajes de grupo
            random_group := group_ids[1 + (random() * (array_length(group_ids, 1) - 1))::INTEGER];
            random_user := user_ids[1 + (random() * (array_length(user_ids, 1) - 1))::INTEGER];
            
            -- Solo insertar si el usuario es miembro del grupo
            IF EXISTS (SELECT 1 FROM group_memberships WHERE group_id = random_group AND user_id = random_user) THEN
                INSERT INTO group_messages (group_id, user_id, message, created_at) 
                VALUES (
                    random_group,
                    random_user,
                    mensajes_grupo[1 + (random() * (array_length(mensajes_grupo, 1) - 1))::INTEGER],
                    now() - (random() * interval '7 days') -- Mensajes de la √∫ltima semana
                );
            END IF;
        END LOOP;
        
        RAISE NOTICE 'Mensajes de grupo creados exitosamente';
    END IF;
    
    -- Crear mensajes privados
    IF array_length(conversation_ids, 1) > 0 THEN
        FOR i IN 1..20 LOOP -- 20 mensajes privados
            DECLARE
                random_conversation_id UUID;
                sender_id UUID;
                receiver_id UUID;
            BEGIN
                random_conversation_id := conversation_ids[1 + (random() * (array_length(conversation_ids, 1) - 1))::INTEGER];
                
                -- Obtener los usuarios de la conversaci√≥n
                SELECT user1_id, user2_id INTO sender_id, receiver_id 
                FROM conversations 
                WHERE id = random_conversation_id;
                
                -- Alternar qui√©n env√≠a el mensaje
                IF random() > 0.5 THEN
                    sender_id := receiver_id;
                END IF;
                
                INSERT INTO private_messages (conversation_id, sender_id, message, created_at) 
                VALUES (
                    random_conversation_id,
                    sender_id,
                    mensajes_privados[1 + (random() * (array_length(mensajes_privados, 1) - 1))::INTEGER],
                    now() - (random() * interval '5 days') -- Mensajes de los √∫ltimos 5 d√≠as
                );
            END;
        END LOOP;
        
        RAISE NOTICE 'Mensajes privados creados exitosamente';
    END IF;
END $$;

-- üéØ VERIFICACI√ìN FINAL
-- Mostrar resumen de datos creados

SELECT 'üìä RESUMEN DE DATOS DE MENSAJER√çA CREADOS' as titulo;

SELECT 
    'GRUPOS' as tipo,
    COUNT(*) as total,
    COUNT(CASE WHEN is_private THEN 1 END) as privados,
    COUNT(CASE WHEN is_verified THEN 1 END) as verificados
FROM groups

UNION ALL

SELECT 
    'MEMBRES√çAS' as tipo,
    COUNT(*) as total,
    COUNT(CASE WHEN role = 'admin' THEN 1 END) as admins,
    COUNT(CASE WHEN role = 'member' THEN 1 END) as members
FROM group_memberships

UNION ALL

SELECT 
    'CONVERSACIONES' as tipo,
    COUNT(*) as total,
    COUNT(CASE WHEN last_message IS NOT NULL THEN 1 END) as con_mensajes,
    0 as extra
FROM conversations

UNION ALL

SELECT 
    'MENSAJES GRUPO' as tipo,
    COUNT(*) as total,
    COUNT(CASE WHEN message_type = 'text' THEN 1 END) as texto,
    0 as extra
FROM group_messages

UNION ALL

SELECT 
    'MENSAJES PRIVADOS' as tipo,
    COUNT(*) as total,
    COUNT(CASE WHEN read_at IS NULL THEN 1 END) as no_leidos,
    0 as extra
FROM private_messages;

-- üîç VERIFICAR FUNCIONES CREADAS EN FASE 2
SELECT 'üîß FUNCIONES DE MENSAJER√çA DISPONIBLES' as titulo;

SELECT 
    routine_name as funcion,
    'Disponible ‚úÖ' as estado
FROM information_schema.routines 
WHERE routine_schema = 'public' 
  AND routine_name IN ('get_user_conversations', 'get_user_groups', 'update_conversation_last_message');

-- üéØ EJEMPLOS DE CONSULTAS √öTILES
SELECT 'üìù EJEMPLOS DE USO' as titulo;

-- Mostrar grupos m√°s activos
WITH grupos_activos AS (
    SELECT 
        g.name,
        COUNT(gm.id) as total_mensajes
    FROM groups g
    LEFT JOIN group_messages gm ON g.id = gm.group_id
    GROUP BY g.id, g.name
    ORDER BY COUNT(gm.id) DESC
    LIMIT 3
)
SELECT 
    'Top 3 Grupos M√°s Activos' as consulta,
    STRING_AGG(name || ' (' || total_mensajes || ' mensajes)', ', ') as resultado
FROM grupos_activos;

-- Estad√≠sticas por categor√≠a
SELECT 
    category as categoria,
    COUNT(*) as grupos,
    SUM(member_limit) as capacidad_total,
    AVG(member_limit) as capacidad_promedio
FROM groups
GROUP BY category
ORDER BY grupos DESC;

SELECT '‚úÖ DATOS DE MENSAJER√çA CREADOS EXITOSAMENTE' as resultado;
SELECT 'üöÄ Ahora puedes probar las funciones de mensajer√≠a con datos reales' as siguiente_paso;
